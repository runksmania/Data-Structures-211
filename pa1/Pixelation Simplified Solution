// Example program
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int main()
{
    class Test{
        private:
            vector<vector<int>> _vect;
            int _height;
            int _width;
        public:
            Test(){
                _vect = { {0,1,2,3}, {4,5,6,7}, {8,9,10,12}, {13,14,15,16}, {16,17,18,19}, {20,21,22,23}, {24,25,26,27}};
                _height = 7;
                _width = 4;
            }
            
            int getWidth(){
                return _width;
            }
            int getHeight(){
                return _height;
            }
            int &getPixel(int row, int col){
                return _vect[row][col];
            }
            
            void setPixel(int row, int col, int pixel){
                _vect[row][col] = pixel;
            }
            
            void setWidth(int w){
                _width = w;
                for(int i = 0; i < _height; i++){
                    _vect[i].resize(w);
                }
            }
            
            void setWidth2(int w){
                _width = w;
                for (auto& row : _vect){
                    _vect.resize(_width);
                }
            }
            
            void setHeight(int h){
                _height = h;
                _vect.resize(h);
            }
    };
    
    Test doc;
    int height = doc.getHeight();
    int width = doc.getWidth();
    
    for(int i = 0; i < doc.getHeight(); i++){
        for(int j = 0; j < doc.getWidth(); j++){
            cout << doc.getPixel(i, j) << " ";
        }
        cout << endl;
    }
    
    int pixelation_degree = 2;
    
    for (int i = 0; i < height; i+= pixelation_degree)
	{
		for (int j = 0; j < width; j+= pixelation_degree)
		{
			int the_pixel_to_rule_them_all = doc.getPixel(i, j);
			int pixels_left_of_ruling_pixel, pixels_right_of_ruling_pixel, pixels_below_ruling_pixel, pixels_above_ruling_pixel;
			
			if(j - pixelation_degree < 0)
			{
			    pixels_left_of_ruling_pixel = 0;
			}
			else
			{
			    pixels_left_of_ruling_pixel = j - pixelation_degree;
			}
			
			if(j + pixelation_degree >= width)
			{
			    pixels_right_of_ruling_pixel = width;
			}
			else
			{
			    pixels_right_of_ruling_pixel = j + pixelation_degree;
			}
			
			if(i + pixelation_degree >= height)
			{
			    pixels_below_ruling_pixel = height;
			}
			else
			{
			    pixels_below_ruling_pixel = i + pixelation_degree;
			}
				
			if(i - pixelation_degree < 0)
			{
			    pixels_above_ruling_pixel = 0;
			}
			else
			{
			    pixels_above_ruling_pixel = i - pixelation_degree;
			}
			
			for(int w = j; w < pixels_right_of_ruling_pixel; w++)
			{
			    doc.setPixel(i, w, the_pixel_to_rule_them_all);
			    
			    for(int h = i; h < pixels_below_ruling_pixel; h++)
			    {
			        doc.setPixel(h, w, the_pixel_to_rule_them_all);
			    }
			    
			    for(int h = pixels_above_ruling_pixel; h > i; h--)
			    {
			        doc.setPixel(h, w, the_pixel_to_rule_them_all);
			    }
			}
			
			for(int w = pixels_left_of_ruling_pixel; w > j; w--)
			{
			    doc.setPixel(i, w, the_pixel_to_rule_them_all);
			    cout << "1" << endl << endl;
			    
			    for(int h = i; h < pixels_below_ruling_pixel; h++)
			    {
			        doc.setPixel(h, w, the_pixel_to_rule_them_all);
			    }
			    
			    for(int h = pixels_above_ruling_pixel; h > i; h--)
			    {
			        doc.setPixel(h, w, the_pixel_to_rule_them_all);
			    }
			}

		}
	}
	
	cout << endl;
		
    for(int i = 0; i < doc.getHeight(); i++){
        for(int j = 0; j < doc.getWidth(); j++){
            cout << doc.getPixel(i, j) << " ";
        }
        cout << endl;
    }
    
    return 0;
}
